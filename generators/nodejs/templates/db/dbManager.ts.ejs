import {getRepository, Repository, DeleteResult, FindManyOptions, createConnection, Connection} from "typeorm";
import {injectable} from "inversify";

<% classes.forEach((x, i) => { %>
import {<%= x.entity.namePascal %> as <%= x.entity.elementId %>} from '..<%= x.path %>/components/<%= x.entity.name %>';<% }) %>
const ormConfig = require('../../ormconfig.json');

type crudType<T> = {repository: Repository<T>, loadAll: () => Promise<T[]>, load: (id: number) => Promise<T | undefined>, save: (entity: T) => Promise<T>, delete: (id: number) => Promise<DeleteResult> };

@injectable()
export class DbManagerCommon {
private static _instance: DbManagerCommon | null = null;
    public static async getInstance() {
        const connectionInfo = {
            type: process.env.DB_TYPE, host: process.env.DB_HOST, port: process.env.DB_PORT,
            username: process.env.POSTGRES_USER, password: process.env.POSTGRES_PASSWORD, database: process.env.POSTGRES_DB, logging: true };

        return this._instance || (this._instance = new DbManagerCommon(await createConnection({ ...connectionInfo, ...ormConfig})));
    }

<% classes.forEach((x, i) => { %>
    private <%= x.entity.elementId %>Repository: Repository<<%= x.entity.elementId %>>;<% }) %>

    constructor(private connection: Connection) {
    <% classes.forEach((x, i) => { %>
        this.<%= x.entity.elementId %>Repository = getRepository(<%= x.entity.elementId %>);<% }) %>
    }

<% classes.forEach((x, i) => { %>
    public get <%= x.entity.elementId %>(): crudType<<%= x.entity.elementId %>> {
        return {
            repository: this.<%= x.entity.elementId %>Repository,

            loadAll: async (options?: FindManyOptions<<%= x.entity.elementId %>>): Promise<<%= x.entity.elementId %>[]> => await this.<%= x.entity.elementId %>Repository.find(options),
            load: async (id: number): Promise<<%= x.entity.elementId %> | undefined> => await this.<%= x.entity.elementId %>Repository.findOne(id),
            save: async (entity: <%= x.entity.elementId %>) => await this.<%= x.entity.elementId %>Repository.save(entity),
            delete: async (id: number) => await this.<%= x.entity.elementId %>Repository.delete(id)
        };
    }
<% }) %>
}
