import {createConnection, EntityMetadata, getConnection, getRepository} from "typeorm";
import {camelCase} from "typeorm/util/StringUtils";
import {RelationMetadata} from "typeorm/metadata/RelationMetadata";

const pkg = require('../package.json');
const ormConfig = require('../ormconfig.json');
const path = require('path');
const fs = require('fs');

<%
const order = function(classes) {
    const ordered = [];

    // extract with no references
    classes = classes.filter(x => {
        if(!x.entity.attributesCombined.some(y => y.typeRef && !y.isArray && !y.isEnum && !y.isDataType && !y.isOptional)) {
            ordered.push(x.entity);
            return false;
        }

        return true;
    });

    while (classes.length) {
        // extract with existing references
        const length = classes.length;
        classes = classes.filter(x => {
            if(x.entity.attributesCombined.filter(y => y.typeRef && !y.isArray && !y.isEnum && !y.isDataType && !y.isOptional).every(z => ordered.some(y => y === z.typeRef))) {
                ordered.push(x.entity);
                return false;
            }

            return true;
        });

        // console.log(ordered.map(x => x.name));
        if(length === classes.length) break;
    }

    return ordered;
}
%>

export class DatabaseUtils {
    private static entitiesOrdered: string[] = [<%- order(classes).map(x => `"${x.namePascal}"`).join(', ') %>];

    /**
     * Preload data.
     */
    static async preload() {
        await this.createDefaultConnection();
        await this.cleanAll();
        await this.loadAll();
    }

    /**
     * Create default connection
     */
    static async createDefaultConnection() {
        await createConnection({...pkg.db, ...ormConfig});
    }

    /**
     * Returns the entites of the database
     */
    static async getEntities() {
        const connection = await getConnection();
        const metadatas = connection.entityMetadatas;

        return this.entitiesOrdered.map((x: string): EntityMetadata => <EntityMetadata>metadatas.find(y => y.name === x))
            .map((x: EntityMetadata) => ({name: x.name, tableName: x.tableName, target: x.target}));
    }

    /**
     * Cleans all the entities
     */
    static async cleanAll() {
        for (const entity of await this.getEntities()) {
            try {
                const repository = await getRepository(entity.name);
                await repository.query(`TRUNCATE "${entity.tableName}" CASCADE;`);
                await repository.query(`SELECT setval(pg_get_serial_sequence('${entity.tableName}', 'id'), 1);`);
            } catch (error) {
                throw new Error(`ERROR: Cleaning test db error on "${entity.tableName}" table: ${error}`);
            }
        }
    }

    /**
     * Insert the data from the src/test/fixtures folder
     */
    static async loadAll() {
        for (const entity of await this.getEntities()) {
            try {
                const repository = await getRepository(entity.target);
                const fixtureFile = path.join(__dirname, `../test/fixtures/${entity.name}.json`);

                if (fs.existsSync(fixtureFile)) {
                    const items = JSON.parse(fs.readFileSync(fixtureFile, 'utf8'));

                    for (let i = 0; i < items.length; i++) {
                        //make sequential insert to ensure all referenced entities are
                        //created in scope of single insert on parent entity too.

                        console.log(`Loading "${entity.name}"`);
                        await repository.save(repository.create(items[i]));
                    }
                }
            } catch (error: any) {
                throw new Error(`ERROR [TestUtils.loadAll()]: Loading fixture "${entity.name}" on test db fails with message "${error.message}" on query "${error.query}"`);
            }

        }
    }
}
