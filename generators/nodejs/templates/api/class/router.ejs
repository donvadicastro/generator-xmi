import express from 'express';
import {Request, Response} from "express";
import {<%= entity.namePascal %>} from '../../<%= entity.getRelativeRoot() %>/design/<%= entity.getPathFromRoot() %>/components/<%= entity.name %>';

import {DITypes} from "../../<%= entity.getRelativeRoot() %>/design/types/diTypes";
import {DIContainer, DbManagerProvider} from "../../<%= entity.getRelativeRoot() %>/inversify.config";

export default class <%= entity.namePascal %>Router {
    private dbProvider: DbManagerProvider;

    constructor() {
        this.dbProvider = DIContainer.get < DbManagerProvider > (DITypes.ICommonDbManagerContract);
    }

    public get routes() {
        return express.Router()
            /**
             * Request all entities.
             */
            .get("/<%= utils.kebabCase(entity.name) %>", async (req: Request, res: Response) => {
                const whereStatement: any = {};
                const repository = await this.getRepository();
            <% entity.attributesCombinedToEdit.filter(x => x.typeRef && !x.isArray && !x.isEnum && !x.isDataType).forEach(x => {%>
                req.query.<%= x.name %> && (whereStatement.<%= x.name %> = req.query.<%= x.name %>);
            <% }) %>
                repository.find({where: whereStatement, relations: [<%- entity.attributesCombinedToEdit.filter(x => x.typeRef && !x.isArray && !x.isEnum && !x.isDataType).map(x => `"${x.name}"`).join(',') %>], order: {id: "ASC"}})
                    .then((result: any) => res.send(result), (error: any) => res.status(500).json({ error: error.message, name: error.name, stack: error.stack}));
            })

            /**
             * Request entity by id.
             */
            .get("/<%= utils.kebabCase(entity.name) %>/:id", async (req: Request, res: Response) => {
                const repository = await this.getRepository();

                repository.findOne(req.params.id, {relations: [<%- entity.attributesCombinedToEdit.filter(x => x.typeRef && !x.isEnum && !x.isDataType).map(x => `"${x.name}"`).join(',') %>]})
                    <% if(entity.generalizationLinksFrom.length) { %>
                    .then(result => {
                        if(result) {
                            result._generalizationLinkType === null ? res.send(result) : res.redirect(`/${result._generalizationLinkType}/${result._generalizationLinkId}`)
                        } else {
                            res.sendStatus(404);
                        }
                    })
                    <% } else { %>.then((result: any) => result ? res.send(result) : res.sendStatus(404))
                    <% } %>.catch((error: any) => res.status(500).json({ error: error.message, name: error.name, stack: error.stack}));
            })

            /**
             * Create new entity.
             */
            .post("/<%= utils.kebabCase(entity.name) %>", async (req: Request, res: Response) => {
                const repository = await this.getRepository();
                const entity = repository.create(<<%= entity.namePascal %>>req.body);

                repository.save(entity)
                    .then((result: any) => res.send(result))
                    .catch((error: any) => res.status(500).json({ error: error.message, name: error.name, stack: error.stack}));
            })

            /**
             * Update existing entity.
             */
            .put("/<%= utils.kebabCase(entity.name) %>/:id", async (req: Request, res: Response) => {
                const repository = await this.getRepository();
                const entity = await repository.findOne(req.params.id);

                if(entity) {
                    repository.merge(entity, req.body);
                    repository.save(entity).then((result: any) => res.send(result), error => res.status(500).json({ error: error.message, name: error.name, stack: error.stack}));
                } else {
                    res.sendStatus(404);
                }
            })

            /**
             * Delete entity.
             */
            .delete("/<%= utils.kebabCase(entity.name) %>/:id", async (req: Request, res: Response) => {
                const repository = await this.getRepository();<% entity.attributesCombinedToEdit.filter(x => x.typeRef && x.linkType === "composite").forEach(x => { %>
                const <%= x.name %>Repository = (await this.dbProvider()).<%= x.typeRef.elementId %>.repository;
            <% }) %>
                const entityToDelete = await repository.findOne(req.params.id, {relations: [<%- entity.attributesCombinedToEdit.filter(x => x.typeRef && !x.isEnum && !x.isDataType).map(x => `"${x.name}"`).join(',') %>]});

                if(entityToDelete) {
                    repository.remove(entityToDelete)
                    <% entity.attributesCombinedToEdit.filter(x => x.typeRef && x.linkType === "composite").forEach(x => { %>
                        // emulating composite reference behavior - delete child property "<%= x.name %>" when parent is deleted
                        .then((result: any) => <%= x.name %>Repository.remove(entityToDelete.<%= x.name %>))
                    <% }) %>
                        .then((result: any) => res.send(entityToDelete))
                        .catch((error: any) => res.status(500).json({ error: error.message, name: error.name, stack: error.stack}));
                } else {
                    res.sendStatus(404);
                }
            });
    }

    private async getRepository() {
        return (await this.dbProvider()).<%= entity.elementId %>.repository;
    }
}
