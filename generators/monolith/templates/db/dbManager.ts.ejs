import {getRepository, Repository, DeleteResult, FindManyOptions} from "typeorm";
import {injectable} from "inversify";

<% classes.forEach((x, i) => { %>
import {<%= x.entity.namePascal %>} from '..<%= x.path %>/components/<%= x.entity.name %>';<% }) %>

type crudType<T> = {repository: Repository<T>, loadAll: () => Promise<T[]>, load: (id: number) => Promise<T | undefined>, save: (entity: T) => Promise<T>, delete: (id: number) => Promise<DeleteResult> };

@injectable()
export class DbManagerCommon {
<% classes.forEach((x, i) => { %>
    private <%= x.entity.name %>Repository: Repository<<%= x.entity.namePascal %>>;<% }) %>

    constructor() {
    <% classes.forEach((x, i) => { %>
        this.<%= x.entity.name %>Repository = getRepository(<%= x.entity.namePascal %>);<% }) %>
    }

<% classes.forEach((x, i) => { %>
    public get <%= x.entity.name %>(): crudType<<%= x.entity.namePascal %>> {
        return {
            repository: this.<%= x.entity.name %>Repository,

            loadAll: async (options?: FindManyOptions<<%= x.entity.namePascal %>>): Promise<<%= x.entity.namePascal %>[]> => await this.<%= x.entity.name %>Repository.find(options),
            load: async (id: number): Promise<<%= x.entity.namePascal %> | undefined> => await this.<%= x.entity.name %>Repository.findOne(id),
            save: async (entity: <%= x.entity.namePascal %>) => await this.<%= x.entity.name %>Repository.save(entity),
            delete: async (id: number) => await this.<%= x.entity.name %>Repository.delete(id)
        };
    }
<% }) %>
}
