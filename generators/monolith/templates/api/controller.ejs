import {Request, Response} from 'express';

import {<%= entity.name %>} from '../../../../design/<%= entity.pathFromRoot %>/process/<%= entity.name %>';

<%
var imports = [];

(entity.lifelines || []).forEach(function (lifeline) {
    imports.push(lifeline.ref);

    (lifeline.ref.required || []).map(x => factory.resolveDependency(x.ref ? x.ref.name : x.name)).forEach(value => {
        imports.push(value);
    })
});
%>

<% imports.filter((x, i, arr) => arr.indexOf(x) === i).forEach(x => { %>
import {<%= x.name %>} from '../../../../design/<%= x.pathFromRoot %>/components/<%= x.name %>';
<% }) %>


export default class Controller {
    private flow: <%= entity.name %>;

    constructor() {
        this.flow = new <%= entity.name %>(<% (entity.lifelines || []).forEach(function (lifeline) { %>
            new <%= lifeline.name %>(
                <% (lifeline.ref.required || []).map(function (value, i, list) { %>
                    new <%= factory.resolveDependency(value.ref ? value.ref.name : value.name).name %>(),
                <% }) %>
            ),
        <% }) %>);
    }

    run(req: Request, res: Response): void {
        this.flow.run({}).then(ret => res.status(201).json(ret));
    }
}
