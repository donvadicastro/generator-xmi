import {DIContainer} from "../../<%= entity.getRelativeRoot() %>/inversify.config";
import {DITypes} from "../../<%= entity.getRelativeRoot() %>/design/types/diTypes";
import {<%= entity.namePascal %>} from '../../<%= entity.getRelativeRoot() %>/design/<%= entity.pathFromRoot %>/process/<%= entity.name %>';
import {FlowState} from "../../<%= entity.getRelativeRoot() %>/design/types/flowState";

<% entity.lifelines.forEach(x => { %>
    import {<%= x.ref.namePascal %>Contract} from '../../<%= entity.getRelativeRoot() %>/design/<%= x.ref.pathFromRoot %>/contracts/<%= x.ref.name %>';
<% }) %>


export default class Controller {
    private flow: <%= entity.namePascal %>;

    constructor() {
        this.flow = new <%= entity.namePascal %>(<% (entity.lifelines || []).forEach(function (lifeline) { %>
            DIContainer.get<<%= lifeline.namePascal %>Contract>(DITypes.<%= lifeline.namePascal %>Contract),
        <% }) %>);
    }

    run(body: any): Promise<any> {
        return this.flow.run(new FlowState(input));
    }
}
