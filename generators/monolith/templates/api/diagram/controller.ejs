import {Request, Response} from 'express';
import {DIContainer} from "../../<%= entity.getRelativeRoot() %>/inversify.config";
import {DITypes} from "../../<%= entity.getRelativeRoot() %>/design/types/diTypes";
import {<%= entity.namePascal %>} from '../../<%= entity.getRelativeRoot() %>/design/<%= entity.pathFromRoot %>/process/<%= entity.name %>';

<%
var imports = [];

(entity.lifelines || []).forEach(function (lifeline) {
    imports.push(lifeline.ref);

    (lifeline.ref.required || []).map(x => factory.resolveDependency(x.ref ? x.ref.name : x.name)).forEach(value => {
        imports.push(value);
    })
});
%>

<% imports.filter((x, i, arr) => arr.indexOf(x) === i).forEach(x => { %>
    import {<%= x.namePascal %>} from '../../<%= entity.getRelativeRoot() %>/design/<%= x.pathFromRoot %>/components/<%= x.name %>';
    import {<%= x.namePascal %>Contract} from '../../<%= entity.getRelativeRoot() %>/design/<%= x.pathFromRoot %>/contracts/<%= x.name %>';
<% }) %>


export default class Controller {
    private flow: <%= entity.namePascal %>;

    constructor() {
        this.flow = new <%= entity.namePascal %>(<% (entity.lifelines || []).forEach(function (lifeline) { %>
            new <%= lifeline.namePascal %>(
                <% (lifeline.ref.required || []).map(function (value, i, list) { %>
                    <% const depName = factory.resolveDependency(value.ref ? value.ref.name : value.name).namePascal %>
                    DIContainer.get<<%= depName %>Contract>(DITypes.<%= depName %>Contract),
                <% }) %>
            ),
        <% }) %>);
    }

    run(req: Request, res: Response): void {
        this.flow.run(req.body || {})
            .then((ret: any) => res.status(201).json(ret))
            .catch(error => res.status(500).json({error: error.message, name: error.name, stack: error.stack}));
    }
}
