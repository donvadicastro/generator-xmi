import express from 'express';
import {Request, Response} from "express";
import {getRepository} from "typeorm";
import {<%= entity.namePascal %>} from '../../<%= entity.getRelativeRoot() %>/design/<%= entity.pathFromRoot %>/components/<%= entity.name %>';

export default express.Router()
    /**
     * Request all entities.
     */
    .get("/<%= utils.kebabCase(entity.name) %>", async (req: Request, res: Response) => {
        const whereStatement: any = {};

        <% entity.attributesCombined.filter(x => x.typeRef && !x.isArray && !x.isEnum && !x.isDataType).forEach(x => {%>
            <% const param = x.name.slice(0, -3) //remove 'Ref' ending part %>
            req.query.<%= param %> && (whereStatement.<%= x.name %> = req.query.<%= param %>);
        <% }) %>

        res.send(await getRepository(<%= entity.namePascal %>).find({where: whereStatement, relations: [<%- entity.attributesCombined.filter(x => x.typeRef && !x.isArray && !x.isEnum && !x.isDataType).map(x => `"${x.name}"`).join(',') %>], order: {id: "ASC"}}));
    })

    /**
     * Request entity by id.
     */
    .get("/<%= utils.kebabCase(entity.name) %>/:id", async (req: Request, res: Response) => {
        res.send(await getRepository(<%= entity.namePascal %>).findOne(req.params.id, {relations: [<%- entity.attributesCombined.filter(x => x.typeRef && !x.isEnum && !x.isDataType).map(x => `"${x.name}"`).join(',') %>]}));
    })

    /**
     * Create new entity.
     */
    .post("/<%= utils.kebabCase(entity.name) %>", async (req: Request, res: Response) => {
        const repository = getRepository(<%= entity.namePascal %>);
        const entity = repository.create(req.body);
        res.send(await repository.save(entity));
    })

    /**
     * Update existing entity.
     */
    .put("/<%= utils.kebabCase(entity.name) %>/:id", async (req: Request, res: Response) => {
        const repository = getRepository(<%= entity.namePascal %>);
        const entity = await repository.findOne(req.params.id);

        if(entity) {
            repository.merge(entity, req.body);
            res.send(await repository.save(entity));
        } else {
            res.sendStatus(404);
        }
    })

    /**
     * Delete entity.
     */
    .delete("/<%= utils.kebabCase(entity.name) %>/:id", async (req: Request, res: Response) => {
        const repository = getRepository(<%= entity.namePascal %>);
        const entityToDelete = await repository.findOne(req.params.id);

        if(entityToDelete) {
            res.send(await repository.remove(entityToDelete));
        } else {
            res.sendStatus(404);
        }
    });
