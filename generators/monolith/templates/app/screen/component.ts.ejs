import { Component } from '@angular/core';
import {FormBuilder, FormGroup, Validators} from '@angular/forms';
import {ActivatedRoute, Router} from '@angular/router';
import { HttpClient } from '@angular/common/http';
import {environment} from "../../<%= entity.getRelativeRoot() %>/environments/environment";

@Component({
  selector: 'app-<%= entity.name %>-screen',
  templateUrl: './component.html',
  styleUrls: ['./component.sass']
})
export class <%= entity.name %>ScreenComponent {
  public data: any = {};
  public form: FormGroup;
  public response: any = null;

  constructor(private fb: FormBuilder,
              private router: Router,
              private activatedRoute: ActivatedRoute,
              private http: HttpClient) {
  }

  ngOnInit() {
    this.loadData();
    this.form = this.fb.group({
    <% (entity.children || []).filter(x => x.stereotype !== 'button').forEach(function (child) { %>
      <%= child.name %>: ['', Validators.required],
    <% }) %>
    });
  }

  protected run(action: string) {
    const data = this.form.getRawValue();
    this.http.post(`${environment.api.url}/${action}`, data).subscribe((res) => this.response = res);
  }

  private loadData() {
<% (entity.children || []).filter(x => x.stereotype).forEach(function (child, i) { %>
  <% if(child.links.informationFLow.length && child.links.informationFLow[0].end === child) {%>
    <% var elementRefPath = child.links.informationFLow[0].start.pathFromRoot %>
    this.http.post(`${environment.api.url}/<%= elementRefPath.length ? utils.kebabCase(elementRefPath.slice(0, -1)) : elementRefPath %>`, {})
      .subscribe((res: any) => this.form.patchValue({ <%= child.name %>: res }));
  <% } %>
<% }) %>
  }
}
