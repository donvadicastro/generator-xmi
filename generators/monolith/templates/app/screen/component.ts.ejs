<% const build = (parent, callback) => (parent.children || []).forEach(x => { callback(x); build(x, callback); }) %>
<% const objectControls = (entity.children || []).filter(x => x.typeRef) %>

import { Component } from '@angular/core';
import {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';
import {ActivatedRoute, Router} from '@angular/router';
import { HttpClient } from '@angular/common/http';
import {environment} from "../../<%= entity.getRelativeRoot() %>/environments/environment";

@Component({
  selector: 'app-<%= entity.name %>-screen',
  templateUrl: './component.html',
  styleUrls: ['./component.sass']
})
export class <%= entity.namePascal %>ScreenComponent {
  public data: any = {};
  public form: FormGroup;
  public response: any = null;
<% objectControls.forEach(x => { %>
  public <%= x.name %>All: any[] = [];
<% }) %>
<% (entity.children || []).filter(x => ['combo', 'combobox'].indexOf(x.stereotype) >= 0).forEach((child, i) => { %>
  <% if(child.links.informationFLow.length && child.links.informationFLow[0].end === child) {%>
    public <%= child.name %>All: any[] = [];
  <% } %>
<% }) %>

  constructor(private fb: FormBuilder,
              private router: Router,
              private activatedRoute: ActivatedRoute,
              private http: HttpClient) {
  }

  ngOnInit() {
    this.loadData();
    this.form = this.fb.group({
    <% (entity.children || []).filter(x => x.stereotype !== 'button').forEach(child => { %>
    <% if(child.stereotype === 'table') { %>
      '<%= child.alias || child.name %>': this.fb.array([]),
    <% } else { %>
      '<%= child.alias || child.name %>': ['', Validators.required],
    <% } %>
    <% }) %>
    });
  }

  protected getGroupControls(formControlName: string): { [key: string]: AbstractControl } {
    return (<FormGroup>this.form.get(formControlName)).controls;
  }

  protected run(action: string) {
    const data = this.form.getRawValue();
    this.http.post(`${environment.api.url}/${action}`, data).subscribe((res: any) => {
      this.response = res;
      this.loadData();
    });
    return false;
  }

  <% (entity.children || []).filter(x => x.stereotype).forEach(function (child, i) { %>
    <% child.getInformationFlows('in').forEach(x => { %>
      protected loadData_<%= child.namePascal %>(data?: any) {
        <% var elementRefPath = x.start.elementRef.getPathFromRootWithModifier(utils.kebabCase) %>
        this.http.post(`${environment.api.url}/<%= elementRefPath %>`, data)
        .subscribe((res: any) => <% if(child.stereotype === 'table') { %>this.form.setControl('<%= child.name %>', this.fb.array((res.returns ? (res.returns.length ? res.returns : [res.returns]) : []).map((x: any) => this.fb.group(x))))<% } else if(['combo', 'combobox'].indexOf(child.stereotype) >= 0) { %>this.<%= child.name %>All = res.returns<% } else {%>this.form.patchValue({ <%= child.name %>: res.returns })<% } %>);
      }
    <% }) %>

    <% if(['combo', 'combobox'].indexOf(child.stereotype) >= 0) { %>
      protected change_<%= child.namePascal %>($event: KeyboardEvent) {
        <% child.getCascadeFlows('out').forEach(x => { %>
          this.loadData_<%= x.end.namePascal %>({'<%= child.alias || child.name%>': this.form.controls['<%= child.alias || child.name %>'].value});
        <% }) %>
      }
    <% } %>
  <% }) %>

  <% objectControls.forEach(x => { %>
    protected loadData_<%= x.namePascal %>() {
      this.http.get(`${environment.api.url}/<%= x.typeRef.getPathFromRootWithModifier(utils.kebabCase) %>/<%= utils.kebabCase(x.typeRef.name) %>`, {})
      .subscribe((res: any) =>  this.<%= x.name %>All = res);
    }
  <% }) %>

  private loadData() {
  <% (entity.children || []).filter(x => x.stereotype).forEach(function (child, i) { %>
    <% child.getInformationFlows('in').forEach(x => { %>
      this.loadData_<%= child.namePascal %>();
    <% }) %>
  <% }) %>

  <% objectControls.forEach(x => { %>
    this.loadData_<%= x.namePascal %>();
  <% }) %>
  }
}
