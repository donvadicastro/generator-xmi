import { Component } from '@angular/core';
import {FormBuilder, FormGroup, Validators} from '@angular/forms';
import {ActivatedRoute, Router} from '@angular/router';
import { HttpClient } from '@angular/common/http';
import {environment} from "../../../<%= entity.getRelativeRoot() %>/environments/environment";

<% var imports = {};
  (entity.attributesCombined || []).filter(x => x.typeRef && x.isEnum).forEach(x => {
    imports[x.typeRef.pathFromRoot + '/enums/' + x.typeRef.name] = x.typeRef.namePascal;
  }); %>

<% Object.keys(imports).forEach(key => { %>
  import {<%= imports[key] %>} from '../../../../<%= entity.getRelativeRoot() %>/design/<%= key %>';
<% }); %>

@Component({
  selector: 'app-<%= entity.name %>-edit',
  templateUrl: './component.html',
  styleUrls: ['./component.sass']
})
export class <%= entity.namePascal %>EditComponent {
  private apiRootUrl = environment.api.url + '/<%= utils.kebabCase(entity.pathFromRoot) %>/<%= entity.name %>';

  public data: any = {};
  public form: FormGroup;

<% (entity.attributesCombined || []).filter(x => x.typeRef).forEach(x => { %>
  public <%= x.name %>All: any[] = [];
<% }) %>

  constructor(private fb: FormBuilder,
              private router: Router,
              private activatedRoute: ActivatedRoute,
              private http: HttpClient) {
  }

  ngOnInit() {
    this.loadData();
    this.form = this.fb.group({
    <% const formBuilder = (entity, containerCallback, callback) => (entity.attributesCombined || entity.attributes).filter(x => x.name)
            .map(x => (x.typeRef && x.isDataType) ? containerCallback(x, formBuilder(x.typeRef, containerCallback, callback)) : callback(x)).join('') %>

    <%- formBuilder(entity,
            (attr, content) => `${attr.name}: this.fb.group({ ${content} }),`,
            (attr) => `${attr.name}: [${attr.typeDefaultValue}, Validators.required],`) %>
  });
  }

  protected save() {
    const data = this.form.getRawValue();

  <% (entity.attributesCombined || []).filter(x => x.name && x.type === 'Date').forEach((attr) => { %>
    data.<%= attr.name %> = new Date(data.<%= attr.name %>).getTime();
  <% }) %>

  <% (entity.attributesCombined || []).filter(x => x.name && x.isEnum).forEach((attr) => { %>
    data.<%= attr.name %> = data.<%= attr.name %> && data.<%= attr.name %>.id;
  <% }) %>

    this.http[this.data.id ? 'put' : 'post'](this.data.id ? `${this.apiRootUrl}/${this.data.id}` : this.apiRootUrl, data)
      .subscribe(() => this.router.navigate(['..'], { relativeTo: this.activatedRoute }));
  }

  protected delete() {
    const url = `${this.apiRootUrl}/${this.data.id}`;

    if(window.confirm('Confirm delete')) {
      this.http.delete(url)
          .subscribe(() => this.router.navigate(['..'], {relativeTo: this.activatedRoute}));
    }
  }

  private loadData() {
  <% (entity.attributesCombined || []).filter(x => x.typeRef).forEach(x => { %>
    <% if(x.isEnum) { %>
    this.<%= x.name %>All = Object.keys(<%= x.typeRef.namePascal + (x.isEnum ? '' : 'Contract') %>)
      .filter((key: string) => isNaN(parseInt(key)))
      .map((key: string) => ({ id: <%= x.typeRef.namePascal + (x.isEnum ? '' : 'Contract')%>[key as keyof typeof <%= x.typeRef.namePascal + (x.isEnum ? '' : 'Contract')%>], label: key }));
    <% } else { %>
    this.http.get(environment.api.url + '/<%= utils.kebabCase(x.typeRef ? x.typeRef.pathFromRoot : x.pathFromRoot) %>/<%= x.name.substr(0, x.name.length - (x.isArray ? 7 : 3)) %>').subscribe(
      (res: any) => this.<%= x.name %>All = res.map((x: any) => ({...x, ...{label: JSON.stringify(x)}})));
    <% } %>
  <% }) %>

    this.activatedRoute.params.subscribe(params => {
      if (params['id']) {
        this.http.get(`${this.apiRootUrl}/${params['id']}`)
          .subscribe(res => {
            this.data = <any>res;
            this.form.patchValue(this.data)
          });
      }
    });
  }

  private buitifyEntity(entity: any): string {
    const data = Object.keys(entity).map((x: any) => {
      const value = typeof entity[x] === 'string' ? entity[x] : null;
      return value && value.substr(0, 30).padEnd(30 - value.length, "\xA0");
    }).filter(x => x);

    return data.length ? (data.length > 1 ? data.join(' | ') : data[0].trim()) : '';
  }

}
