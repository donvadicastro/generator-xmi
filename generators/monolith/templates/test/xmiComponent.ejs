<% const first = entity.messages && entity.messages.length && entity.messages[0].to.elementRef; %>
const chalk = require("chalk");

import "reflect-metadata";
import {<%= entity.namePascal %>} from '../process/<%= entity.namePascal %>';
import {DIContainer} from "../<%= entity.getRelativeRoot() %>/inversify.config";
import {DITypes} from "../<%= entity.getRelativeRoot() %>/design/types/diTypes";

<%
    var componentImports = [];
    var contractImports = [];

    first && first.operations.find(x => x.name === entity.messages[0].operation.name).inputParameters.filter(x => x.typeRef).forEach(x => {
        componentImports.some(y => y === x.typeRef) || componentImports.push(x.typeRef);
    });

    (entity.lifelines || []).forEach(lifeline => contractImports.push(lifeline.ref));
%>

<% componentImports.forEach(x => { %>
    import {<%= x.namePascal %>} from '<%= entity.getRelativePath(x) %>/components/<%= x.name %>';
<% }) %>

<% contractImports.filter((x, i, arr) => arr.indexOf(x) === i).forEach(x => { %>
    import {<%= x.namePascal %>Contract} from '<%= entity.getRelativePath(x) %>/contracts/<%= x.name %>';
<% }) %>

const flow = new <%= entity.namePascal %>(<% (entity.lifelines || []).forEach(function (lifeline) { %>
    DIContainer.get<<%= lifeline.namePascal %>Contract>(DITypes.<%= lifeline.namePascal %>Contract),
<% }) %>);

console.log('Flow execution:');
flow.run({start: new Date(),
<% first && first.operations.find(x => x.name === entity.messages[0].operation.name).inputParameters.forEach(x => { %>
    <%= x.name %>: <%- x.isArray ? '[]' : (x.typeRef ? `new ${x.typeRef.namePascal}()` : x.typeDefaultValue) %>,
<% }) %>
}).then((ret: any) => {
    console.log('--> Completed');
    process.exit(0);
});
