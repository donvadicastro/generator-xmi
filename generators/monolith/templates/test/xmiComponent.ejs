<% const first = entity.messages && entity.messages.length && entity.messages[0].to.elementRef; %>
const chalk = require("chalk");

import "reflect-metadata";
import {<%= entity.namePascal %>} from '../process/<%= entity.namePascal %>';

<% first && first.operations.find(x => x.name === entity.messages[0].operation.name).inputParameters.filter(x => x.typeRef).forEach(x => { %>
    import {<%= x.typeRef.namePascal %>} from '<%= entity.getRelativePath(x.typeRef) %>/components/<%= x.typeRef.name %>';
<% }) %>

<%
    var imports = [];

    (entity.lifelines || []).forEach(function (lifeline) {
        imports.push(lifeline.ref);

        (lifeline.ref.required || []).map(x => factory.resolveDependency(x.ref ? x.ref.name : x.name)).forEach(value => {
            imports.push(value);
        })
    });
%>

<% imports.filter((x, i, arr) => arr.indexOf(x) === i).forEach(x => { %>
    import {<%= x.namePascal %>} from '<%= entity.getRelativePath(x) %>/components/<%= x.name %>';
<% }) %>

const flow = new <%= entity.namePascal %>(<% (entity.lifelines || []).forEach(function (lifeline) { %>
    new <%= lifeline.namePascal %>(
        <% (lifeline.ref.required || []).map(function (value) { %>
            new <%= factory.resolveDependency(value.ref ? value.ref.name : value.name).namePascal %>(),
        <% }) %>
    ),
<% }) %>);

console.log('Flow execution:');
flow.run({start: new Date(),
<% first && first.operations.find(x => x.name === entity.messages[0].operation.name).inputParameters.forEach(x => { %>
    <%= x.name %>: <%= x.isArray ? '[]' : (x.typeRef ? `new ${x.typeRef.namePascal}()` : x.typeDefaultValue) %>,
<% }) %>
}).then((ret: any) => {
    console.log('--> Completed');
    process.exit(0);
});
