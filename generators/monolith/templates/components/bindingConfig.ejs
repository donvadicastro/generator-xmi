<%
    const refs = {};

    components.forEach(x => {
        refs[`./design/${x.entity.pathFromRoot}/contracts/${x.entity.name}`] = {key: `${x.entity.namePascal}Contract`, id: `${x.entity.elementId}Contract`};
        refs[`./design/${x.entity.pathFromRoot}/components/${x.entity.name}`] = {key: x.entity.namePascal, id: x.entity.elementId};

        x.entity.provided.forEach(y => {
            refs[`./design/${y.typeRef.pathFromRoot}/contracts/${y.typeRef.name}`] = {key: `${y.typeRef.namePascal}Contract`, id: `${y.typeRef.elementId}Contract` };
        });
    });
%>

import { Container } from "inversify";
import { DITypes } from "./design/types/diTypes";
import { DbManagerCommon } from "./design/common/dbManagerCommon";
import {Context} from "inversify/dts/planning/context";

<% Object.keys(refs).forEach(x => { %>
import {<%= refs[x].key %> as <%= refs[x].id %> } from '<%= x %>';
<% }) %>

const DIContainer = new Container();
const env = process.env;
type DbManagerProvider = () => Promise < DbManagerCommon >;

DIContainer.bind<DbManagerProvider>(DITypes.ICommonDbManagerContract)
    .toDynamicValue((context: Context) => () => DbManagerCommon.getInstance());

<% components.forEach(x => { %>
DIContainer.bind<<%= x.entity.elementId %>Contract>(DITypes.<%= x.entity.elementId %>).to(<%= x.entity.elementId %>);
<% x.entity.provided.forEach(y => { %>
DIContainer.bind<<%= y.typeRef.elementId %>Contract>(DITypes.<%= y.typeRef.elementId %>).to(<%= x.entity.elementId %>);<% })}) %>

export { DIContainer, DbManagerProvider };
