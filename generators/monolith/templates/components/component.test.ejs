import {<%= entity.namePascal %>Contract} from "../contracts/<%= entity.name %>";
import {FlowState} from "<%= entity.getRelativeRoot() %>/types/flowState";

import {DIContainer} from "../<%= entity.getRelativeRoot() %>/inversify.config";
import {DITypes} from "<%= entity.getRelativeRoot() %>/types/diTypes";
<%
    const imports = (entity.operations || []).reduce((memo, operation) => {
        operation.inputParameters.filter(x => x.typeRef).forEach(x => memo[entity.getRelativePath(x.typeRef) + '/components/' + x.typeRef.name] = x.typeRef);
        operation.returnParameter.typeRef && (memo[entity.getRelativePath(operation.returnParameter.typeRef) + '/components/' + operation.returnParameter.typeRef.name] = operation.returnParameter.typeRef);

        return memo;
    }, {});
%>
<% Object.keys(imports).forEach(key => {%>
import {<%= imports[key].namePascal %>} from '<%= key %>';<%})%>

describe('<%= entity.name %> specification check', () => {
    const instance = DIContainer.get<<%= entity.namePascal %>Contract>(DITypes.<%= entity.elementId %>);
    const state: FlowState = new FlowState();
<% (entity.operations || []).forEach(operation => { %>
    it('verify "<%= operation.name %>"', async () => {<% operation.inputParameters.forEach(x => { %>
        const <%= x.name %> = <%= x.isArray ? '[' : '' %><%- x.typeRef ? `new ${x.typeRef.namePascal}()` : x.typeDefaultValue %><%= x.isArray ? ']' : '' %>;<% }) %>
        const expected <% if(operation.isReturnArray) { %>: <%= operation.returnParameter.typeRef ? `${operation.returnParameter.typeRef.namePascal}` : operation.returnParameter.type %>[]<% } %> = <%- operation.isReturnArray ? '[]' : operation.returnParameter.typeRef ? `new ${operation.returnParameter.typeRef.namePascal}()` : operation.returnParameter.typeDefaultValue %>;
        <% if(operation.inputParameters.length > 0) { %>
        const params = <% if(operation.inputParameters.length > 1) { %>{ <%= operation.inputParameters.map(x => `${x.name}: ${x.name}`).join(', ')%> }<% } else { %><%= operation.inputParameters[0].name %><% } %>;
        <% } %>
        const actual = await instance.<%= operation.name %>(<%= operation.inputParameters.length ? 'params' : '' %>);
        expect(actual).toEqual(expected);
    });
<% }) %>
});
