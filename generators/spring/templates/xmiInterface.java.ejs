package com.generator.design.<%= entity.getPathFromRootWithModifier(utils.self, '.') %>.contracts;

<% entity.referencesAsList.forEach(reference => {%>
  import {<%= reference.name %>} from '<%= reference.path.substr(3) %>';
<% }) %>

<%- include('partial/common/classDescription', {entity: entity, system: true}) -%>

public interface <%= entity.namePascal %> {
  <% (entity.attributes || []).forEach(function (attr) { %>
    /**
    * <%= attr.name %> property
    */
    <%= attr.typeRef ? attr.typeRef.namePascal : attr.type %> <%= attr.name %>;
  <% }) %>

  <% [...entity.associationLinks || [], ...entity.aggregationLinks || []].forEach(x => { %>
    <% if(!x.target.multiplicity || x.target.multiplicity === '1' || x.target.multiplicity === '0..1') { %>
        /**
        *  <%= x.target.typeRef.name %> reference
        */
        <%= x.target.typeRef.namePascal %> <%= x.target.typeRef.name %>Ref;
    <%} else {%>
      /**
      *  <%= x.target.typeRef.name %> reference
      */
      <%= x.target.typeRef.namePascal %>[] <%= x.target.typeRef.name %>RefList;
  <% }}) %>

  <% (entity.operations || []).forEach(function (operation) { %>
    /**
    * <%= operation.name %> description.
    */
    <%- include('partial/interface/operation', {operation: operation}) -%>;
  <% }) %>

  <% if(entity.hasLoop) { %>
    //#region Loop
    /**
    * Loop condition.
    */
    loopCondition: boolean;

    /**
    * Get loop delay in ms.
    */
    loopDelay: number;
    //#endregion
  <% } %>

  //# region Message conditions
  <% entity.conditions && Object.keys(entity.conditions).forEach(x => entity.conditions[x].forEach(y => { %>
    '<%- y %>'(state: any): boolean;
  <% })) %>
  //# endregion
  }
