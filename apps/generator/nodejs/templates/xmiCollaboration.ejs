<% const firstCmp = entity.messages && entity.messages.length && entity.messages[0].to.elementRef; %>
<% const firstOperation = firstCmp && firstCmp.operations.find(x => x.name === entity.messages[0].operation.name); %>
<%- include('partial/collaboration/import', {entity: entity}) -%>

<%
    var componentImports = [];

    firstOperation && firstOperation.inputParameters.filter(x => x.typeRef).forEach(x => {
        componentImports.some(y => y === x.typeRef) || componentImports.push(x.typeRef);
    });
%>

<% componentImports.forEach(x => { %>
    import {<%= x.namePascal %>} from '<%= entity.getRelativePath(x) %>/components/<%= x.name %>';
<% }) %>

export class <%= entity.namePascal %> {
    <%- include('partial/collaboration/constructor', {entity: entity}) -%>

    /**
    /* Execute process
    */
    async run(inputState: FlowState): Promise<any> {
        console.log('--> initialize local state storage');
        storage.init(/* options ... */);

        // define flow
        <%- include('partial/collaboration/flow', {entity: entity}) -%>

        return inputState.value;
    }
}
